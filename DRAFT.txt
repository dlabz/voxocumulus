
//class read bitmap

//fetches BINARY FILES synchronously using XMLHttpRequest
load_url = function(url) {
netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
var req = new XMLHttpRequest();
req.open('GET',url,false);
//XHR binary charset opt by Marcus Granado 2006 [http://mgran.blogspot.com]
req.overrideMimeType('text/plain; charset=x-user-defined');
req.send(null);
if (req.status != 200) return '';
return req.responseText;
}


////end class read bmp





//class pixel3D array


var filestream = load_url(url);
var abyte = filestream.charCodeAt(x) & 0xff;

create a header encoder/decoder ///refere to BMPEncoder.as

////single object///


data is packed in a 3D array. voxelArray[x][y][z] will get a 4 letter string representing ARGB(0xffffffff) values of a pixel/voxel at x,y,z coordinates
properties .a .r .g .b get single channel

for nesting cubes everyvalue should have a .refersTo property where uid of a voxel block will be stored. Based on a onScreen size of a block, if it's bigger than something render will check if refersTo != 0 and accordingly exchange it with a block it referes to

//end single object




/////modeling function///o3d

modeling function will be used to creat a 3d object from a voxelArray. It will keep track of references and use them to create maps(bump or vertex) and skin each voxel bigg enugh with it's reference. 

This function should either run on a separate tread or be fake-treaded to allow instant display of loaded/processed data
///endmodelfunction





//render function//o3d

render should take a created world and display it on screen. 
it needs to support shading or real shadows
vertexshaders, bumpmaps wich should both be used, depending on onscreen size of a block / distance from camera

some heavy cooling




//endrenderfunction


///
optional
Use a function to convert 3d array to 1D array for encoding  and decoding a bitmap

////

for operations on bitmap create getPixel32(x,y) and setPixel32(x,y,c)

/////
refferencesç

http://neil.fraser.name/software/bmp_lib/bmp_lib.js
http://web.archive.org/web/20071103070418/http://mgran.blogspot.com/2006/08/downloading-binary-streams-with.html

